require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CostsOfBitcoinsController do
  before :each do
    login_admin
    create_products
  end
  
  # This should return the minimal set of attributes required to create a valid
  # CostsOfBitcoin. As you add validations to CostsOfBitcoin, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "qty_of_satoshi" => "1" } }

  describe "GET index" do
    it "assigns all costs_of_bitcoins as @costs_of_bitcoins" do
      costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
      get :index, {}
      assigns(:costs_of_bitcoins).should eq([costs_of_bitcoin])
    end
  end

  describe "GET show" do
    it "assigns the requested costs_of_bitcoin as @costs_of_bitcoin" do
      costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
      get :show, {:id => costs_of_bitcoin.to_param}
      assigns(:costs_of_bitcoin).should eq(costs_of_bitcoin)
    end
  end

  describe "GET new" do
    it "assigns a new costs_of_bitcoin as @costs_of_bitcoin" do
      get :new, {}
      assigns(:costs_of_bitcoin).should be_a_new(CostsOfBitcoin)
    end
  end

  describe "GET edit" do
    it "assigns the requested costs_of_bitcoin as @costs_of_bitcoin" do
      costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
      get :edit, {:id => costs_of_bitcoin.to_param}
      assigns(:costs_of_bitcoin).should eq(costs_of_bitcoin)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new CostsOfBitcoin" do
        expect {
          post :create, {:costs_of_bitcoin => valid_attributes}
        }.to change(CostsOfBitcoin, :count).by(1)
      end

      it "assigns a newly created costs_of_bitcoin as @costs_of_bitcoin" do
        post :create, {:costs_of_bitcoin => valid_attributes}
        assigns(:costs_of_bitcoin).should be_a(CostsOfBitcoin)
        assigns(:costs_of_bitcoin).should be_persisted
      end

      it "redirects to the created costs_of_bitcoin" do
        post :create, {:costs_of_bitcoin => valid_attributes}
        response.should redirect_to(CostsOfBitcoin.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved costs_of_bitcoin as @costs_of_bitcoin" do
        # Trigger the behavior that occurs when invalid params are submitted
        CostsOfBitcoin.any_instance.stub(:save).and_return(false)
        post :create, {:costs_of_bitcoin => { "qty_of_satoshi" => "invalid value" }}
        assigns(:costs_of_bitcoin).should be_a_new(CostsOfBitcoin)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        CostsOfBitcoin.any_instance.stub(:save).and_return(false)
        post :create, {:costs_of_bitcoin => { "qty_of_satoshi" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested costs_of_bitcoin" do
        costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
        # Assuming there are no other costs_of_bitcoins in the database, this
        # specifies that the CostsOfBitcoin created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        CostsOfBitcoin.any_instance.should_receive(:update_attributes).with({ "qty_of_satoshi" => "1" })
        put :update, {:id => costs_of_bitcoin.to_param, :costs_of_bitcoin => { "qty_of_satoshi" => "1" }}
      end

      it "assigns the requested costs_of_bitcoin as @costs_of_bitcoin" do
        costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
        put :update, {:id => costs_of_bitcoin.to_param, :costs_of_bitcoin => valid_attributes}
        assigns(:costs_of_bitcoin).should eq(costs_of_bitcoin)
      end

      it "redirects to the costs_of_bitcoin" do
        costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
        put :update, {:id => costs_of_bitcoin.to_param, :costs_of_bitcoin => valid_attributes}
        response.should redirect_to(costs_of_bitcoin)
      end
    end

    describe "with invalid params" do
      it "assigns the costs_of_bitcoin as @costs_of_bitcoin" do
        costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        CostsOfBitcoin.any_instance.stub(:save).and_return(false)
        put :update, {:id => costs_of_bitcoin.to_param, :costs_of_bitcoin => { "qty_of_satoshi" => "invalid value" }}
        assigns(:costs_of_bitcoin).should eq(costs_of_bitcoin)
      end

      it "re-renders the 'edit' template" do
        costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        CostsOfBitcoin.any_instance.stub(:save).and_return(false)
        put :update, {:id => costs_of_bitcoin.to_param, :costs_of_bitcoin => { "qty_of_satoshi" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested costs_of_bitcoin" do
      costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
      expect {
        delete :destroy, {:id => costs_of_bitcoin.to_param}
      }.to change(CostsOfBitcoin, :count).by(-1)
    end

    it "redirects to the costs_of_bitcoins list" do
      costs_of_bitcoin = CostsOfBitcoin.create! valid_attributes
      delete :destroy, {:id => costs_of_bitcoin.to_param}
      response.should redirect_to(costs_of_bitcoins_url)
    end
  end

end
